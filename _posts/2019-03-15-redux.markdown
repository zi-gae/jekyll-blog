---
layout: post
title: "Redux"
date: 2019-03-15
description:
image: /assets/images/redux/redux.png
author: Jeong geonwoo
tags:
  - react
  - redux
---

#### Redux 용어

    redux 는 javscript object 형태로 데이터를 저장하고있다. 이를 store 라고 부른다.
    Redux(object) 의 데이터를 수정하기 위해서는 action 을 reducer 로 보내야한다. reducer 가 나를 대신에 object 를 변경한다.

### 액션 (Action)

상태에 어떠한 변화가 필요하게 될 땐, 우리는 액션이란 것을 발생시킨다. 이는, 하나의 객체이고 액션 객체는 다음과 같은 형식으로 있다.

```javascript
{
  type: "AddTodo",
  data: {
    id: 0,
    text: "삼겹살 먹기"
  }
}
```

액션 객체는 `type` 필드는 필수이고, 그 외의 값은 임의로 넣으면 된다.

### 액션 생성함수 (Action Creator)

액션 생성함수는, 액션을 만드는 함수입니다. 단순히 파라미터를 받아와서 액션 객체 형태로 만들어준다.

```javascript
function addTodo(data) {
  return {
    type: "ADD_TODO",
    data
  };
}

const changeInput = text => ({
  type: "CHANGE_INPUT",
  text
});
```

### 리듀서 (Reducer)

리듀서는 변화를 일으키는 함수입니다. 리듀서는 두가지의 파라미터를 받아옵니다.

```javascript
initialState = {
  phone: 010,
  addr: 부산
};

const reducer = (state = initalState, action) => {
  switch (action.type) {
    case ADD_SECONDE:
      return {
        ...state,
        addr: 서울
      };
      break;
  }
};
```

### dispatch

디스패치는 스토어의 내장함수 중 하나이다. 디스패치는 액션을 발생 시키는 것 이라고 이해하면 된다 `dispatch` 라는 함수에는 액션을 파라미터로 전달한다. 자매품으로 `bindActionCrator` 도 있다.

`사용법은 아래 connect & dispatch & bindActionCreators 참조`

### Store

리덕스에서는 한 애플리케이션 당 하나의 스토어를 만들게 된다. 스토어 안에는 현재의 앱 상태와 리듀서가 들어가 있고, 추가적으로 몇가지 내장 함수들이 있다.

## redux ducks pattern

1. 항상 `reducer()`란 이름의 함수를 export default 해야한다.
2. 항상 모듈의 `action` 생성자들을 함수형태로 export 해야한다.
3. 항상 npm-module-or-app/reducer/ACTION_TYPE 형태의 `action` 타입을 가져야한다.
4. 어쩌면 `action` 타입들을 UPPER_SNAKE_CASE로 export 할 수 있다.

### Provider & createStore

`react-redux`에 포함된 컴포넌트

```javascript
import { Provider } from "react-redux";
import { createStore } from "redux";
import reducer from "../../reducer";

let store = createStore(reducer);

export default function App() {
  return (
    <Provider store={store}>
      <Timer></Timer>
    </Provider>
  );
}
```

작성한 `reducer` 를 `createStore` 이용해 생성하며, `Provier` 는 Store 를 복사해 자식 컴포넌트에게 넘겨준다.

### connect & dispatch & bindActionCreators

```javascript
import { connect } from "react-redux";
import { bindActionCreators } from "redux";

const mapStateToProps = state => {
  const { isPlaying, elapsedTime, timeDuration } = state;
  return {
    isPlaying,
    elapsedTime,
    timeDuration
  };
};

const mapDispatchToProps = dispatch => {
  return {
    startTimer: bindActionCreators(startTimer, dispatch),
    restartTimer: bindActionCreators(restartTimer, dispatch)
  };
};

// const mapDispatchToProps = dispatch => {
//   return {
//     startTimer: () => dispatch(startTimer()),
//     restartTimer: () => dispatch(restartTimer())
//   };
// };

export default connect(mapStateToProps, mapDispatchToProps)(PresenterTimer);
```

Proiver 로 부터 전달 받은 store 를 적용 시키는 방법이다.

다이렉트로 사용해도 되지만 presenter 와 logic 을 분리하고 싶을 때 `connect` 를 이용해 props 전달를 전달 가능하다.
`bindActionCreators` 또는 `dispatch` 상황에 맞게 선택하여 사용하면 된다.

### combineReducers

리듀서들로 이루어진 객체를 취하는 최상위 리듀서이다.

```javascript
const reducer = combineReducers({
  reducer1,
  reducer2,
  reducer3,
  ...,
});
```

### redux-logger

현재 상태와 다음 상태를 확인 할 수 있는 middleware 로거이다.

`yarn add redux-logger`

### redux-thunk

리덕스를 사용하는 프로젝트에서 비동기 작업을 처리 할 때 대표적인 방법으로 `redux-thunk` 가 있다. 이를 사용하면 비동기 작업을 간단하게 할 수 있다.
간단히 설명하면 `redux-thunk` 미들웨어는 객체 대신 함수를 생성하는 액션 생성함수를 작성 할 수 있게 해준다.
