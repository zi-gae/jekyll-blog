---
layout: post
title: "WEBPACK BASIC"
date: 2020-01-10
description: webpack 기본 이해하기
image: /assets/images/webpack/webpack.jpeg
author: Jeong geonwoo
tags:
  - webpack
  - babel
---

# WEBPACK 이란?

현대 Javascript Application의 Static Module Bundler입니다.
Webpack이 실행된다면 Dependencies Graph를 통해 필요한 형태의 하나 또는 여러개의 Bundle로 생성합니다.

#### BUNDLE 이란?

소프트웨어 및 일부 하드웨어와 함께 작동하는 데 필요한 모든 것을 포함하는 Package
각각의 모듈들에 대해 의존성 관계를 파악하여 하나 또는 여러개의 그룹으로 볼 수 있습니다.

아래 코드를 통해 살펴보자.

```javascript
var path = require("path");
var webpack = require("webpack");
const UglifyJsPlugin = require("uglifyjs-webpack-plugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");

module.exports = {
  entry: "./index",
  resolve: {
    modules: [path.resolve(__dirname, ".."), "node_modules"],
    extensions: [".ts", ".tsx", ".js", ".jsx"]
  },
  output: {
    path: path.resolve(__dirname, "dist"),
    filename: "bundle.js"
    //dist 폴더의 bundle.js 파일로 결과를 저장할 것이다.
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        loader: "bael-loader",
        options: {
          presets: ["@babel/preset-env"]
        }
      }
    ]
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: path.join(__dirname, "../public/index.html"),
      inject: true
    })
  ],
  optimization: {
    minimizer: [new UglifyJsPlugin()]
  }
};
```

#### resolve

- 웹팩이 빌드할 파일의 확장자를 결정
- node_modules 의 파일 위치를 지정해줘야함
- 위 두가지가 이루어지지 않을 경우 확장자 인식을 못해 에러가 나거나 node_modules 을 찾을 수 없다는 에러가 발생함
  
---

#### Entry

- 웹팩이 빌드할 파일을 알려주는 역할을 한다.
- 직/간접적으로 의존성을 가진 모듈들을 이해한다.
- 여러개의 `entry가` 존재할 수 있습니다.
- 위처럼 작성하면 `./index.js` 파일 기준으로 import 되어 있는 모든 파일들을 찾아 하나의 파일로 합친다.
- Default value : `./src/index.js`

---

#### Output

- 웹팩에서 빌드를 완료하면 `output` 에 명시되어 있는 정보를 통해 빌드 파일을 생성한다.
- Default value : `./dist/main.js`

---

#### Loaders

- Webpack은 오직 Javascript와 Json만 이해할 수 있는 단점이 있다.
- Loader는 다른 Type의 파일을 Webpack이 이해하고 처리가능한 모듈로 변환시키는 작업을 한다.

---

### plugins
- 웹팩이 빌드 할때 추가할 플러그인
- 많은 종류의 플러그인이 있다.

---

#### Optimization

- js 코드를 어떻게 압축 할지 명시한다.

---

#### Mode

코드에는 없지만 유용한 `Mode`

- 다양한 Profile로 지정하여 진행할 수 있습니다.
- option: development, production, none
- Default value : production

---

결론: `entry` 에서 `module` 을 적용 후 플러그인을 지나 `output` 으로 출력된다.

---

```javascript
module : {
    rules: {
        test: '가지고올 파일 정규식',
        use: [ // 생략 가능
            {
                loader: '사용할 로더 이름',
                options: { 사용할 로더 옵션 }
            }
        ]
    }
}
```

`babel-loader` 는 자주 사용하게 될 로더 옵션 입니다.
사전에 작업한 `.babelrc` 를 참고하여 es6 를 es5 로 변환해주고 또는 아래 처럼 `babelrc` 값을 줄 수 있다.

```
options: {
    presets: ["@babel/preset-env"]
}
```

#### Hot loader

프론트엔드의 코드 변경점을 저장시마다 반영 해보자
- nodemon 과 비슷한 동작
  
1. install package
    ```
    yarn add -D react-hot-loader webpack-dev-server
    or
    npm install -D react-hot-loader webpack-dev-server
    ```

`webpack-dev-server` 는 `webpack.config.js` 를 읽어서 서버로 유지해준다.

2. package.json 스크립트 추가
  
    ```
    "scripts": {
        "start": "webpack-dev-server --open --config ./config/webpack.config.js --hot",
      },
    ```
    webpack-dev-server 명령어를 이용하고 끝에 --hot 을 붙여 주면 된다.

3.  webpack.config.js 에 `devServer` 추가
    ```javascript
    //webpack.config.js
    module.exports = {
      ...,
      ...,
      devServer: {
      host: "localhost",
      port: 4000
      }
    }
    ``` 
    위와 같이 설정하면 localhost:4000 번에 열리게 된다.
---

#### index.html 경로

`webpack` 은 기본적으로 프로젝트 루트 경로의 `index.html` 을 찾는다. 

이를 바꿔주기 위해서는 `html-webpack-plugin` 을 웹팩에 추가해주자

    const HtmlWebpackPlugin = require("html-webpack-plugin");
    ...
    
    module.export = {
    ...,
    plugins: [
        new HtmlWebpackPlugin({
          template: path.join(__dirname, "../public/index.html"),
          inject: true
        })
      ],
    ...,
    }

위와 같이 추가 해주면 index.html 을 타겟한다.

---

    미완성 포스트입니다.
    공부하여 내용 추가 할 예정
